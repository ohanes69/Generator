const jwt = require('jsonwebtoken'); // On importe le module jsonwebtoken

module.exports = {
  // üõ†Ô∏è G√©n√©ration d‚Äôun token JWT pour un utilisateur
  generateTokenForUser: function (userData) {
    return jwt.sign(
      {
        userId: userData.id,  // L'ID de l'utilisateur
        email: userData.email // L'email de l'utilisateur
      },
      process.env.JWT_SECRET, // Assure-toi que la variable d'environnement JWT_SECRET est d√©finie
      {
        expiresIn: '24h' // Le token expire au bout de 24 heures
      }
    );
  },

  // üë§ R√©cup√©ration de l'ID de l'utilisateur √† partir du token JWT
  getUserId: function (authorization) {
    try {
      // On r√©cup√®re le token qui se trouve apr√®s le mot "Bearer" dans l'en-t√™te Authorization
      const token = authorization?.split(' ')[1];
      
      // On d√©code et v√©rifie le token √† l'aide de la cl√© secr√®te JWT
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      
      // On renvoie l'ID de l'utilisateur contenu dans le token d√©cod√©
      return decoded.userId;
    } catch (err) {
      // Si une erreur survient (token invalide ou expir√©), on renvoie -1
      return -1;
    }
  }
};